{"version":3,"file":"component---src-pages-quiz-tsx-b1c0ae15ecb41755df7d.js","mappings":"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","sources":["webpack://little_survey/./src/components/sections/proj/QuizQuestions.tsx","webpack://little_survey/./src/components/sections/proj/QuizQuestions.module.css","webpack://little_survey/./src/pages/quiz.tsx"],"sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react'\nimport { navigate } from 'gatsby'\n\nimport getClassNames from '../../../utils/get-class-names'\nimport Button from '../../basics/Button/Button'\nimport Text from '../../basics/Text/Text'\nimport BreadcrumbNav from '../../basics/BreadcrumbNav/BreadcrumbNav'\n\nimport * as quizQuestionsStyles from './QuizQuestions.module.css'\n\nconst defaultCharacterButtons = {\n  1: false,\n  2: false,\n  3: false,\n  4: false,\n  5: false,\n  6: false,\n  7: false,\n  8: false,\n}\n\nconst questions = {\n  1: 'Who do you feel would... leave lego on the floor at bed time?',\n  2: 'Who do you feel would... share their sweeties?',\n  3: 'Who do you feel would... help a granny across the road?',\n  4: 'Who do you feel would... pretend the smell was not their fart?',\n  5: 'Who do you feel would... eat all the cake without sharing?',\n  6: 'Who do you feel would... be able to make a paper plane?',\n  7: 'Who do you feel would... eat marmite?',\n  8: 'Who do you feel would... snore in their sleep?',\n}\nconst QuizQuestions: React.FC = () => {\n  const [quizQuestionResponses, setQuizQuestionResponses] = useState({})\n  const [chosenCharacters, setChosenCharacters] = useState(defaultCharacterButtons)\n  const [questionNumber, setQuestionNumber] = useState<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8>(1)\n  const [characterChoiceLast, setCharacterChoiceLast] = useState(false)\n  const [quizBeforeSmileyFaces, setQuizBeforeSmileyFaces] = useState(false)\n\n  useEffect(() => {\n    const detailsFormString = window.sessionStorage.getItem('detailsForm')\n    const detailsForm = detailsFormString ? JSON.parse(detailsFormString) : null\n\n    if (!detailsForm) {\n      navigate('/').then()\n    } else {\n      if (detailsForm.characterChoiceLast) {\n        setCharacterChoiceLast(detailsForm.characterChoiceLast)\n      }\n      if (detailsForm.quizBeforeSmileyFaces) {\n        setQuizBeforeSmileyFaces(detailsForm.quizBeforeSmileyFaces)\n      }\n    }\n  }, [])\n\n  const avatarImages = [\n    { src: '../../../images/avatar/white_female_disabled.png', name: 'white_female_disabled' },\n    { src: '../../../images/avatar/white_male_disabled.png', name: 'white_male_disabled' },\n    { src: '../../../images/avatar/black_female.png', name: 'black_female' },\n    { src: '../../../images/avatar/black_male.png', name: 'black_male' },\n    { src: '../../../images/avatar/asian_female.png', name: 'asian_female' },\n    { src: '../../../images/avatar/asian_male.png', name: 'asian_male' },\n    { src: '../../../images/avatar/white_female.png', name: 'white_female' },\n    { src: '../../../images/avatar/white_male.png', name: 'white_male' },\n  ]\n\n  const handleFormSubmit = async (event: FormEvent): Promise<void> => {\n    event.preventDefault()\n    const latestAnswer = {\n      [questionNumber]: chosenCharacters,\n    }\n    setQuizQuestionResponses({ ...quizQuestionResponses, ...latestAnswer })\n    setChosenCharacters(defaultCharacterButtons)\n    if (questionNumber == 1) {\n      window.sessionStorage.setItem(\n        'quizQuestions',\n        JSON.stringify({ ...quizQuestionResponses, ...latestAnswer })\n      )\n      if (quizBeforeSmileyFaces) {\n        await navigate('/smiley-faces')\n      } else {\n        if (characterChoiceLast) {\n          await navigate(`/character`)\n        } else {\n          await navigate(`/download`)\n        }\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      setQuestionNumber(questionNumber + 1)\n    }\n  }\n\n  const quizQuestion = (questionNumber: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8): JSX.Element => (\n    <form onSubmit={handleFormSubmit}>\n      <fieldset>\n        <legend>Quiz Question {questionNumber}</legend>\n        <p>\n          <Text size='L'>{questions[questionNumber]}</Text>\n        </p>\n        <>\n          {avatarImages.map((character, index) => {\n            const buttonClassNames = getClassNames({\n              defaultClasses: [quizQuestionsStyles.buttonImage],\n              conditionalClasses: {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                [`${quizQuestionsStyles.buttonImageSelected}`]: chosenCharacters[`${index + 1}`],\n              },\n            })\n            return (\n              <button\n                className={buttonClassNames}\n                type='button'\n                key={character.name}\n                onClick={(): void => {\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  const previous = chosenCharacters[`${index + 1}`]\n                  setChosenCharacters({ ...chosenCharacters, [`${index + 1}`]: !previous })\n                }}\n              >\n                <img\n                  className={quizQuestionsStyles.avatarImage}\n                  src={`/images/avatar/${character.name}.png`}\n                />\n              </button>\n            )\n          })}\n        </>\n      </fieldset>\n      <Button\n        type='submit'\n        buttonText={`Submit Question ${questionNumber} answer`}\n        fillSpace={false}\n      />\n      <p>Chosen Characters - {JSON.stringify(chosenCharacters)}</p>\n    </form>\n  )\n\n  return (\n    <>\n      <BreadcrumbNav urlList={[{ url: '/', label: 're-start' }, { label: 'Quiz questions' }]} />\n      {quizQuestion(questionNumber)}\n    </>\n  )\n}\n\nexport default QuizQuestions\n","// extracted by mini-css-extract-plugin\nexport var buttonImage = \"QuizQuestions-module--button-image--L0B5E\";\nexport var buttonImageSelected = \"QuizQuestions-module--button-image-selected--4A4QI\";\nexport var avatarImage = \"QuizQuestions-module--avatar-image--elqCY\";","import React from 'react'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport QuizQuestions from '../components/sections/proj/QuizQuestions'\n\nconst IndexPage: React.FC = () => {\n  const formFns = useForm()\n  return (\n    <FormProvider {...formFns}>\n      <GenericLayout>\n        <QuizQuestions />\n      </GenericLayout>\n    </FormProvider>\n  )\n}\n\nexport default IndexPage\n"],"names":["defaultCharacterButtons","questions","useState","quizQuestionResponses","setQuizQuestionResponses","chosenCharacters","setChosenCharacters","questionNumber","setQuestionNumber","characterChoiceLast","setCharacterChoiceLast","quizBeforeSmileyFaces","setQuizBeforeSmileyFaces","useEffect","detailsFormString","window","sessionStorage","getItem","detailsForm","JSON","parse","navigate","then","avatarImages","src","name","handleFormSubmit","event","preventDefault","latestAnswer","setItem","stringify","BreadcrumbNav","urlList","url","label","onSubmit","Text","size","map","character","index","buttonClassNames","getClassNames","defaultClasses","conditionalClasses","className","type","key","onClick","previous","Button","buttonText","fillSpace","quizQuestion","formFns","useForm","GenericLayout"],"sourceRoot":""}