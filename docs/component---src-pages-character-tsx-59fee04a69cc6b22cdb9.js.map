{"version":3,"file":"component---src-pages-character-tsx-59fee04a69cc6b22cdb9.js","mappings":"uQAmGA,EA3FoC,WAClC,OAA8CA,EAAAA,EAAAA,UAAS,IAAhDC,EAAP,KAAwBC,EAAxB,KACA,GAAsDF,EAAAA,EAAAA,WAAS,GAAxDG,EAAP,KAA4BC,EAA5B,KACA,GAA0DJ,EAAAA,EAAAA,WAAS,GAA5DK,EAAP,KAA8BC,EAA9B,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAoBC,OAAOC,eAAeC,QAAQ,eAClDC,EAAcJ,EAAoBK,KAAKC,MAAMN,GAAqB,KAEnEI,GAGCA,EAAYT,qBACdC,EAAuBQ,EAAYT,qBAEjCS,EAAYP,uBACdC,EAAyBM,EAAYP,yBANvCU,EAAAA,EAAAA,UAAS,KAAKC,SASf,IAEH,IAWMC,EAAgB,mCAAG,WAAOC,GAAP,oEACvBA,EAAMC,iBACNV,OAAOC,eAAeU,QAAQ,YAAaP,KAAKQ,UAAU,CAAEC,UAAWrB,MACnEE,EAHmB,iCAIfY,EAAAA,EAAAA,UAAS,aAJM,0CAMjBV,EANiB,mCAObU,EAAAA,EAAAA,UAAS,SAPI,0BASbA,EAAAA,EAAAA,UAAS,iBATI,4CAAH,sDActB,OACE,gCACE,gBAACQ,EAAA,EAAD,CAAeC,QAAS,CAAC,CAAEC,IAAK,IAAKC,MAAO,YAAc,CAAEA,MAAO,yBACnE,wBAAMC,SAAUV,GACd,gCACE,uDACA,gCA/Ba,CACnB,CAAEW,IAAK,mDAAoDC,KAAM,yBACjE,CAAED,IAAK,iDAAkDC,KAAM,uBAC/D,CAAED,IAAK,0CAA2CC,KAAM,gBACxD,CAAED,IAAK,wCAAyCC,KAAM,cACtD,CAAED,IAAK,0CAA2CC,KAAM,gBACxD,CAAED,IAAK,wCAAyCC,KAAM,cACtD,CAAED,IAAK,0CAA2CC,KAAM,gBACxD,CAAED,IAAK,wCAAyCC,KAAM,eAwBhCC,KAAI,SAACR,GAAc,MACzBS,GAAmBC,EAAAA,EAAAA,GAAc,CACrCC,eAAgB,CC9DP,iDD+DTC,oBAAkB,OC9DD,0DDgEbjC,GAAmBqB,EAAUO,KAFf,KAKpB,OACE,0BACEM,UAAWJ,EACXK,KAAK,SACLC,IAAKf,EAAUO,KACfS,QAAS,WACPpC,EAAmBoB,EAAUO,QAG/B,uBACEM,UC5EK,gDD6ELP,IAAG,kBAAoBN,EAAUO,KAA9B,eAOf,gBAACU,EAAA,EAAD,CACEC,SAA6B,IAAnBvC,EACVmC,KAAK,SACLK,WAAW,0BACXC,WAAW,IAEb,+CAAuBzC,GApCzB,OEzCN,EAX4B,WAC1B,IAAM0C,GAAUC,EAAAA,EAAAA,MAChB,OACE,gBAAC,KAAiBD,EAChB,gBAACE,EAAA,EAAD,KACE,gBAAC,EAAD","sources":["webpack://little_survey/./src/components/sections/proj/CharacterQuestion.tsx","webpack://little_survey/./src/components/sections/proj/CharacterQuestion.module.css","webpack://little_survey/./src/pages/character.tsx"],"sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react'\nimport { navigate } from 'gatsby'\n\nimport Button from '../../basics/Button/Button'\nimport BreadcrumbNav from '../../basics/BreadcrumbNav/BreadcrumbNav'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as characterQuestionsStyles from './CharacterQuestion.module.css'\n\nconst CharacterQuestion: React.FC = () => {\n  const [chosenCharacter, setChosenCharacter] = useState('')\n  const [characterChoiceLast, setCharacterChoiceLast] = useState(false)\n  const [quizBeforeSmileyFaces, setQuizBeforeSmileyFaces] = useState(false)\n\n  useEffect(() => {\n    const detailsFormString = window.sessionStorage.getItem('detailsForm')\n    const detailsForm = detailsFormString ? JSON.parse(detailsFormString) : null\n\n    if (!detailsForm) {\n      navigate('/').then()\n    } else {\n      if (detailsForm.characterChoiceLast) {\n        setCharacterChoiceLast(detailsForm.characterChoiceLast)\n      }\n      if (detailsForm.quizBeforeSmileyFaces) {\n        setQuizBeforeSmileyFaces(detailsForm.quizBeforeSmileyFaces)\n      }\n    }\n  }, [])\n\n  const avatarImages = [\n    { src: '../../../images/avatar/white_female_disabled.png', name: 'white_female_disabled' },\n    { src: '../../../images/avatar/white_male_disabled.png', name: 'white_male_disabled' },\n    { src: '../../../images/avatar/black_female.png', name: 'black_female' },\n    { src: '../../../images/avatar/black_male.png', name: 'black_male' },\n    { src: '../../../images/avatar/asian_female.png', name: 'asian_female' },\n    { src: '../../../images/avatar/asian_male.png', name: 'asian_male' },\n    { src: '../../../images/avatar/white_female.png', name: 'white_female' },\n    { src: '../../../images/avatar/white_male.png', name: 'white_male' },\n  ]\n\n  const handleFormSubmit = async (event: FormEvent): Promise<void> => {\n    event.preventDefault()\n    window.sessionStorage.setItem('character', JSON.stringify({ character: chosenCharacter }))\n    if (characterChoiceLast) {\n      await navigate(`/download`)\n    } else {\n      if (quizBeforeSmileyFaces) {\n        await navigate('/quiz')\n      } else {\n        await navigate('/smiley-faces')\n      }\n    }\n  }\n\n  return (\n    <>\n      <BreadcrumbNav urlList={[{ url: '/', label: 're-start' }, { label: 'Character question' }]} />\n      <form onSubmit={handleFormSubmit}>\n        <fieldset>\n          <legend>Choose your character</legend>\n          <>\n            {avatarImages.map((character) => {\n              const buttonClassNames = getClassNames({\n                defaultClasses: [characterQuestionsStyles.buttonImage],\n                conditionalClasses: {\n                  [`${characterQuestionsStyles.buttonImageSelected}`]:\n                    chosenCharacter == character.name,\n                },\n              })\n              return (\n                <button\n                  className={buttonClassNames}\n                  type='button'\n                  key={character.name}\n                  onClick={(): void => {\n                    setChosenCharacter(character.name)\n                  }}\n                >\n                  <img\n                    className={characterQuestionsStyles.avatarImage}\n                    src={`/images/avatar/${character.name}.png`}\n                  />\n                </button>\n              )\n            })}\n          </>\n        </fieldset>\n        <Button\n          disabled={chosenCharacter == ''}\n          type='submit'\n          buttonText='Submit Chosen Character'\n          fillSpace={false}\n        />\n        <p>Chosen character - {chosenCharacter}</p> {/* TODO: REMOVE THIS */}\n      </form>\n    </>\n  )\n}\n\nexport default CharacterQuestion\n","// extracted by mini-css-extract-plugin\nexport var buttonImage = \"CharacterQuestion-module--button-image--Gfckk\";\nexport var buttonImageSelected = \"CharacterQuestion-module--button-image-selected--YQjxH\";\nexport var avatarImage = \"CharacterQuestion-module--avatar-image--XFgdX\";","import React from 'react'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport CharacterQuestion from '../components/sections/proj/CharacterQuestion'\n\nconst IndexPage: React.FC = () => {\n  const formFns = useForm()\n  return (\n    <FormProvider {...formFns}>\n      <GenericLayout>\n        <CharacterQuestion />\n      </GenericLayout>\n    </FormProvider>\n  )\n}\n\nexport default IndexPage\n"],"names":["useState","chosenCharacter","setChosenCharacter","characterChoiceLast","setCharacterChoiceLast","quizBeforeSmileyFaces","setQuizBeforeSmileyFaces","useEffect","detailsFormString","window","sessionStorage","getItem","detailsForm","JSON","parse","navigate","then","handleFormSubmit","event","preventDefault","setItem","stringify","character","BreadcrumbNav","urlList","url","label","onSubmit","src","name","map","buttonClassNames","getClassNames","defaultClasses","conditionalClasses","className","type","key","onClick","Button","disabled","buttonText","fillSpace","formFns","useForm","GenericLayout"],"sourceRoot":""}