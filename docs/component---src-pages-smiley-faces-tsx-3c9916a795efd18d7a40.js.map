{"version":3,"file":"component---src-pages-smiley-faces-tsx-3c9916a795efd18d7a40.js","mappings":"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","sources":["webpack://little_survey/./src/components/basics/Image/Image.module.css","webpack://little_survey/./src/components/basics/Image/Image.tsx","webpack://little_survey/./src/components/sections/proj/SmileyFaces.tsx","webpack://little_survey/./src/components/sections/proj/SmileyFaces.module.css","webpack://little_survey/./src/pages/smiley-faces.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var sizeS = \"Image-module--size-S--kdO3e\";\nexport var sizeM = \"Image-module--size-M--uyda0\";\nexport var sizeL = \"Image-module--size-L--gCoB7\";","import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as imageStyles from './Image.module.css'\n\ntype ImageProps = {\n  alt: string\n  src: string\n  size?: 'S' | 'M' | 'L'\n  className?: string\n}\n\nconst Image: React.FC<ImageProps> = ({ alt, src, size = 'M', className, ...rest }: ImageProps) => {\n  const classNames = getClassNames({\n    defaultClasses: [imageStyles[`size${size}`]],\n    className,\n  })\n  return <img alt={alt} src={src} className={classNames} {...rest} />\n}\n\nexport default Image\n","import React, { FormEvent, useEffect, useState } from 'react'\nimport { navigate } from 'gatsby'\n\nimport Button from '../../basics/Button/Button'\nimport BreadcrumbNav from '../../basics/BreadcrumbNav/BreadcrumbNav'\nimport Image from '../../basics/Image/Image'\nimport Text from '../../basics/Text/Text'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as smileyFacesStyles from './SmileyFaces.module.css'\n\nconst SmileyFaces: React.FC = () => {\n  const [smileyQuestionResponses, setSmileyQuestionResponses] = useState({})\n  const [chosenSmiley, setChosenSmiley] = useState('')\n  const [questionNumber, setQuestionNumber] = useState(1)\n  const [characterChoiceLast, setCharacterChoiceLast] = useState(false)\n  const [quizBeforeSmileyFaces, setQuizBeforeSmileyFaces] = useState(false)\n\n  useEffect(() => {\n    const detailsFormString = window.sessionStorage.getItem('detailsForm')\n    const detailsForm = detailsFormString ? JSON.parse(detailsFormString) : null\n\n    if (!detailsForm) {\n      navigate('/').then()\n    } else {\n      if (detailsForm.characterChoiceLast) {\n        setCharacterChoiceLast(detailsForm.characterChoiceLast)\n      }\n      if (detailsForm.quizBeforeSmileyFaces) {\n        setQuizBeforeSmileyFaces(detailsForm.quizBeforeSmileyFaces)\n      }\n    }\n  }, [])\n\n  const smileyFaceImages = [\n    { name: '5' },\n    { name: '4' },\n    { name: '3' },\n    { name: '2' },\n    { name: '1' },\n  ]\n  const handleFormSubmit = async (event: FormEvent): Promise<void> => {\n    event.preventDefault()\n    const latestAnswer = {\n      [questionNumber]: chosenSmiley,\n    }\n    setSmileyQuestionResponses({ ...smileyQuestionResponses, ...latestAnswer })\n    if (questionNumber == 1) {\n      window.sessionStorage.setItem(\n        'smileyQuestions',\n        JSON.stringify({ ...smileyQuestionResponses, ...latestAnswer })\n      )\n      if (!quizBeforeSmileyFaces) {\n        await navigate('/quiz')\n      } else {\n        if (characterChoiceLast) {\n          await navigate(`/character`)\n        } else {\n          await navigate(`/download`)\n        }\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      setQuestionNumber(questionNumber + 1)\n      setChosenSmiley('')\n    }\n  }\n\n  const smileyQuestion = (questionNumber: number): JSX.Element => (\n    <form onSubmit={handleFormSubmit}>\n      <fieldset>\n        <legend>Question {questionNumber}</legend>\n        <>\n          <Text size='XL' weight='Bold'>\n            How likely is this person to be an Engineer?\n          </Text>\n          <Image\n            className={smileyFacesStyles.personSceneImage}\n            alt={'Image of person 1'}\n            src={`/images/questions/1.png`}\n          />\n          {smileyFaceImages.map((face) => {\n            const buttonClassNames = getClassNames({\n              defaultClasses: [smileyFacesStyles.buttonImage],\n              conditionalClasses: {\n                [`${smileyFacesStyles.buttonImageSelected}`]: chosenSmiley == face.name,\n              },\n            })\n            return (\n              <button\n                className={buttonClassNames}\n                type='button'\n                key={'face-' + face.name}\n                onClick={(): void => {\n                  setChosenSmiley(face.name)\n                }}\n              >\n                <img\n                  className={smileyFacesStyles.smileyImage}\n                  src={`/images/smileys/${face.name}.png`}\n                />\n              </button>\n            )\n          })}\n        </>\n      </fieldset>\n      <Button\n        disabled={chosenSmiley == ''}\n        type='submit'\n        buttonText='Submit Choice'\n        fillSpace={false}\n      />\n      <p>Choice - {chosenSmiley}</p>\n    </form>\n  )\n\n  return (\n    <>\n      <BreadcrumbNav\n        urlList={[{ url: '/', label: 're-start' }, { label: 'SmileyFace questions' }]}\n      />\n      {smileyQuestion(questionNumber)}\n    </>\n  )\n}\n\nexport default SmileyFaces\n","// extracted by mini-css-extract-plugin\nexport var buttonImage = \"SmileyFaces-module--button-image--NgjFh\";\nexport var buttonImageSelected = \"SmileyFaces-module--button-image-selected--rYJxC\";\nexport var smileyImage = \"SmileyFaces-module--smiley-image--IP0Gb\";\nexport var personSceneImage = \"SmileyFaces-module--person-scene-image--libS7\";","import React from 'react'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport SmileyFaces from '../components/sections/proj/SmileyFaces'\n\nconst IndexPage: React.FC = () => {\n  const formFns = useForm()\n  return (\n    <FormProvider {...formFns}>\n      <GenericLayout>\n        <SmileyFaces />\n      </GenericLayout>\n    </FormProvider>\n  )\n}\n\nexport default IndexPage\n"],"names":["sizeS","sizeM","sizeL","alt","src","size","className","rest","classNames","getClassNames","defaultClasses","imageStyles","useState","smileyQuestionResponses","setSmileyQuestionResponses","chosenSmiley","setChosenSmiley","questionNumber","setQuestionNumber","characterChoiceLast","setCharacterChoiceLast","quizBeforeSmileyFaces","setQuizBeforeSmileyFaces","useEffect","detailsFormString","window","sessionStorage","getItem","detailsForm","JSON","parse","navigate","then","smileyFaceImages","name","handleFormSubmit","event","preventDefault","latestAnswer","setItem","stringify","BreadcrumbNav","urlList","url","label","onSubmit","Text","weight","map","face","buttonClassNames","conditionalClasses","type","key","onClick","Button","disabled","buttonText","fillSpace","smileyQuestion","formFns","useForm","GenericLayout"],"sourceRoot":""}