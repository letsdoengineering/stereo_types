{"version":3,"file":"component---src-pages-proj-2-tsx-3eff6d2da53a8e2e1e79.js","mappings":"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","sources":["webpack://little_survey/./src/components/basics/List/ListItem.tsx","webpack://little_survey/./src/components/basics/List/ListItem.module.css","webpack://little_survey/./src/components/basics/List/List.tsx","webpack://little_survey/./src/components/basics/List/List.module.css","webpack://little_survey/./src/components/basics/BreadcrumbNav/BreadcrumbNav.tsx","webpack://little_survey/./src/components/basics/BreadcrumbNav/BreadcrumbNav.module.css","webpack://little_survey/./src/components/sections/proj/survey.module.css","webpack://little_survey/./src/components/basics/Image/Image.module.css","webpack://little_survey/./src/components/basics/Image/Image.tsx","webpack://little_survey/./src/components/sections/proj/survey.tsx","webpack://little_survey/./src/pages/proj2.tsx"],"sourcesContent":["import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as listItemStyles from './ListItem.module.css'\n\ntype ListItemProps = React.AllHTMLAttributes<HTMLLIElement> & {\n    /** unique key for each <li> rendered to help react track dynamically rendered contents */\n    listKey: string\n    /** optional: styles a list to appear as links if set - defaults to false */\n    isLinks?: boolean\n}\n\n/** Text: renders a Text tag of a type based on the tagName prop */\nconst ListItem: React.FC<ListItemProps> = ({\n    listKey,\n    className,\n    isLinks = false,\n    children,\n    ...rest\n}: ListItemProps) => {\n    const classNames = getClassNames({\n        className,\n        conditionalClasses: { [`${listItemStyles.isLinks}`]: isLinks },\n    })\n\n    return (\n        <li key={listKey} className={classNames} {...rest}>\n            {children}\n        </li>\n    )\n}\n\nexport default ListItem\n","// extracted by mini-css-extract-plugin\nexport var isLinks = \"ListItem-module--is-links--wjiDe\";","import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as listStyles from './List.module.css'\n\nexport type ListProps = {\n    /** optional: default to ul if not passed */\n    isOrdered?: boolean\n    /** optional: default to unstyled if not passed */\n    isUnstyled?: boolean\n    /** optional: styles a list to appear as links if set - defaults to false */\n    isLinks?: boolean\n    /** optional: indents the list if set to true */\n    isIndented?: boolean\n    /** optional: class-names */\n    className?: string\n    /** children always of type ReactNode */\n    children: React.ReactNode\n}\n\n/** Text: renders a Text tag of a type based on the tagName prop */\nconst List: React.FC<\n    ListProps &\n        React.AllHTMLAttributes<HTMLUListElement> &\n        React.AllHTMLAttributes<HTMLOListElement>\n> = ({\n    isOrdered = false,\n    isUnstyled = true,\n    isLinks = false,\n    isIndented = false,\n    className,\n    children,\n}: ListProps) => {\n    const Wrapper = `${isOrdered ? 'ol' : 'ul'}` as keyof JSX.IntrinsicElements\n    const classNames = getClassNames({\n        className,\n        conditionalClasses: {\n            [`${listStyles.listUnstyled}`]: isUnstyled,\n            [listStyles.itemSpacing]: isIndented,\n        },\n    })\n\n    const childrenWithProps = React.Children.map(children, (child) => {\n        // Checking isValidElement is the safe way and avoids a typescript error too.\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, { isLinks })\n        }\n        return child\n    })\n\n    return <Wrapper className={classNames}>{childrenWithProps}</Wrapper>\n}\n\nexport default List\n","// extracted by mini-css-extract-plugin\nexport var listUnstyled = \"List-module--list-unstyled--OYpBm\";\nexport var itemSpacing = \"List-module--item-spacing--mP5WM\";","import React from 'react'\nimport Text from '../../basics/Text/Text'\nimport ListItem from '../../basics/List/ListItem'\nimport List from '../../basics/List/List'\nimport * as breadcrumbNavStyles from './BreadcrumbNav.module.css'\n\ntype Breadcrumb = {\n    url?: string\n    label: string\n}\n\ntype BreadCrumbProps = {\n    urlList: Breadcrumb[]\n}\n\nconst BreadcrumbNav: React.FC<BreadCrumbProps> = ({ urlList }) => {\n    const navTrail = urlList.map((crumb: Breadcrumb, i) => {\n        const location = crumb.url ? (\n            <a className={breadcrumbNavStyles.link} href={crumb.url}>\n                <Text>{crumb.label}</Text>\n            </a>\n        ) : (\n            <Text weight='Bold'>{crumb.label}</Text>\n        )\n\n        return (\n            <ListItem key={`${i}-${crumb.label}`} listKey={`${i}-${crumb.label}`}>\n                {i > 0 && <Text className={breadcrumbNavStyles.divider}>{`>`}</Text>}\n                {location}\n            </ListItem>\n        )\n    })\n    return <List className={breadcrumbNavStyles.list}>{navTrail}</List>\n}\n\nexport default BreadcrumbNav\n","// extracted by mini-css-extract-plugin\nexport var list = \"BreadcrumbNav-module--list--XJLwI\";\nexport var link = \"BreadcrumbNav-module--link--t8QBw\";\nexport var divider = \"BreadcrumbNav-module--divider--neNB6\";","// extracted by mini-css-extract-plugin\nexport var buttonImage = \"survey-module--button-image--8aTVp\";\nexport var buttonImageSelected = \"survey-module--button-image-selected--54huq\";\nexport var characterImage = \"survey-module--character-image--eGm6I\";\nexport var smileyImage = \"survey-module--smiley-image--QDJiO\";","// extracted by mini-css-extract-plugin\nexport var sizeS = \"Image-module--size-S--kdO3e\";\nexport var sizeM = \"Image-module--size-M--uyda0\";\nexport var sizeL = \"Image-module--size-L--gCoB7\";","import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as imageStyles from './Image.module.css'\n\ntype ImageProps = {\n    alt: string\n    src: string\n    size?: 'S' | 'M' | 'L'\n    className?: string\n}\n\nconst Image: React.FC<ImageProps> = ({ alt, src, size = 'M', className }: ImageProps) => {\n    const classNames = getClassNames({\n        defaultClasses: [imageStyles[`size${size}`]],\n        className,\n    })\n    return <img alt={alt} src={src} className={classNames} />\n}\n\nexport default Image\n","import React, { useEffect, useState } from 'react'\nimport { Controller, useFormContext } from 'react-hook-form'\nimport { navigate } from 'gatsby'\n\nimport Button from '../../basics/Button/Button'\nimport GridRow from '../../basics/Grid/GridRow/GridRow'\nimport GridColumn from '../../basics/Grid/GridColumn/GridColumn'\nimport BreadcrumbNav from '../../basics/BreadcrumbNav/BreadcrumbNav'\nimport Text from '../../basics/Text/Text'\nimport {\n    setDataToLocalStorage,\n    getPreviousSearchDataFromLocalStorage,\n} from '../../../utils/use-local-storage'\nimport * as styles from './survey.module.css'\nimport getClassNames from '../../../utils/get-class-names'\nimport Image from '../../basics/Image/Image'\n\nconst Survey: React.FC = () => {\n    const { control, handleSubmit, register, setValue } = useFormContext()\n    const [previousFormData, setPreviousFormData] = useState<Record<string, any>>()\n    const [surveyQuestionResponses, setSurveyQuestionResponses] = useState({})\n    const [chosenChar, setChosenChar] = useState('')\n    const [question1, setQuestion1] = useState('')\n    const [surveyQuestionNumber, setSurveyQuestionNumber] = useState<1 | 2 | 3 | 4>(1)\n\n    useEffect(() => {\n        register('character')\n        register('question1')\n        register('question2')\n        register('question3')\n        register('question4')\n        register('question5')\n        register('question6')\n        register('question7')\n        register('question8')\n    }, [register])\n\n    useEffect(() => {\n        const existingData = getPreviousSearchDataFromLocalStorage('proj')\n        setPreviousFormData(existingData)\n    }, [])\n\n    const handleMySubmit = async (formData: Record<string, any>): Promise<void> => {\n        console.log('data this time:', formData)\n        console.log('previous responses:', surveyQuestionResponses)\n        setDataToLocalStorage(\n            {\n                survey: { ...surveyQuestionResponses, ...formData },\n                details: previousFormData?.details,\n            },\n            'proj'\n        )\n        setSurveyQuestionResponses({ ...surveyQuestionResponses, ...formData })\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        setSurveyQuestionNumber(surveyQuestionNumber + 1)\n        if (surveyQuestionNumber == 2) await navigate(`/proj3`)\n    }\n\n    const avatarImages = [\n        { src: '../../../images/avatar/1.png', name: '1' },\n        { src: '../../../images/avatar/2.png', name: '2' },\n        { src: '../../../images/avatar/3.png', name: '3' },\n        { src: '../../../images/avatar/4.png', name: '4' },\n        { src: '../../../images/avatar/5.png', name: '5' },\n        { src: '../../../images/avatar/6.png', name: '6' },\n        { src: '../../../images/avatar/7.png', name: '7' },\n    ]\n\n    const smileyFaceImages = [\n        { name: '5' },\n        { name: '4' },\n        { name: '3' },\n        { name: '2' },\n        { name: '1' },\n    ]\n    // const personImages = [\n    //     { name: '1' },\n    //     { name: '2' },\n    //     { name: '3' },\n    //     { name: '4' },\n    //     { name: '5' },\n    //     { name: '6' },\n    //     { name: '7' },\n    // ]\n    const characterQuestion = (\n        <form\n            onSubmit={handleSubmit(({ character }) => {\n                handleMySubmit({\n                    characterChoice: character,\n                })\n            })}\n        >\n            <Controller\n                name='character'\n                control={control}\n                render={(): React.ReactElement => (\n                    <fieldset>\n                        <legend>Choose your character</legend>\n                        <>\n                            {avatarImages.map((character) => {\n                                const buttonClassNames = getClassNames({\n                                    defaultClasses: [styles.buttonImage],\n                                    conditionalClasses: {\n                                        [`${styles.buttonImageSelected}`]:\n                                            chosenChar == character.name,\n                                    },\n                                })\n                                return (\n                                    <button\n                                        className={buttonClassNames}\n                                        type='button'\n                                        key={character.name}\n                                        onClick={(): void => {\n                                            console.log('Clicked with character:', character.name)\n                                            setValue('character', character.name)\n                                            setChosenChar(character.name)\n                                        }}\n                                    >\n                                        <img\n                                            className={styles.characterImage}\n                                            src={`/images/avatar/${character.name}.png`}\n                                        />\n                                    </button>\n                                )\n                            })}\n                        </>\n                    </fieldset>\n                )}\n            />\n            <Button\n                disabled={chosenChar == ''}\n                type='submit'\n                buttonText='Submit Chosen Character'\n                fillSpace={false}\n            />\n            <p>Chosen character - {chosenChar}</p>\n        </form>\n    )\n\n    const questionOne = (\n        <form\n            onSubmit={handleSubmit(({ question1 }) => {\n                handleMySubmit({ question1 })\n            })}\n        >\n            <Controller\n                name='question1'\n                control={control}\n                render={(): React.ReactElement => (\n                    <fieldset>\n                        <legend>Question 1</legend>\n                        <>\n                            <Text size='XL' weight='Bold'>\n                                How likely is this person to be an Engineer?\n                            </Text>\n                            <Image alt={'Image of person 1'} src={`/images/questions/1.png`} />\n                            {smileyFaceImages.map((face) => {\n                                const buttonClassNames = getClassNames({\n                                    defaultClasses: [styles.buttonImage],\n                                    conditionalClasses: {\n                                        [`${styles.buttonImageSelected}`]: question1 == face.name,\n                                    },\n                                })\n                                return (\n                                    <button\n                                        className={buttonClassNames}\n                                        type='button'\n                                        key={'face-' + face.name}\n                                        onClick={(): void => {\n                                            console.log('Q1) Clicked with face:', face.name)\n                                            setValue('question1', face.name)\n                                            setQuestion1(face.name)\n                                        }}\n                                    >\n                                        <img\n                                            className={styles.smileyImage}\n                                            src={`/images/smileys/${face.name}.png`}\n                                        />\n                                    </button>\n                                )\n                            })}\n                        </>\n                    </fieldset>\n                )}\n            />\n            <Button\n                disabled={question1 == ''}\n                type='submit'\n                buttonText='Submit Choice'\n                fillSpace={false}\n            />\n            <p>Choice - {question1}</p>\n        </form>\n    )\n\n    const questionTwo = <p>question2</p>\n    const questionThree = <p>question3</p>\n    const surveyQuestions = {\n        1: characterQuestion,\n        2: questionOne,\n        3: questionTwo,\n        4: questionThree,\n    }\n    // if ()\n    return (\n        <>\n            <BreadcrumbNav\n                urlList={[{ url: '/', label: 're-start' }, { label: 'survey questions' }]}\n            />\n            <GridRow isPadded>\n                <GridColumn isPadded>{surveyQuestions[surveyQuestionNumber]}</GridColumn>\n            </GridRow>\n        </>\n    )\n}\n\nexport default Survey\n","import React from 'react'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport Survey from '../components/sections/proj/survey'\n\nconst IndexPage: React.FC = () => {\n    const formFns = useForm()\n    return (\n        <FormProvider {...formFns}>\n            <GenericLayout>\n                <Survey />\n            </GenericLayout>\n        </FormProvider>\n    )\n}\n\nexport default IndexPage\n"],"names":["listKey","className","isLinks","children","rest","classNames","getClassNames","conditionalClasses","key","isOrdered","isUnstyled","isIndented","Wrapper","childrenWithProps","React","child","navTrail","urlList","map","crumb","i","location","url","href","Text","label","weight","buttonImage","buttonImageSelected","sizeS","sizeM","sizeL","alt","src","size","defaultClasses","imageStyles","useFormContext","control","handleSubmit","register","setValue","useState","previousFormData","setPreviousFormData","surveyQuestionResponses","setSurveyQuestionResponses","chosenChar","setChosenChar","question1","setQuestion1","surveyQuestionNumber","setSurveyQuestionNumber","useEffect","existingData","getPreviousSearchDataFromLocalStorage","handleMySubmit","formData","console","log","setDataToLocalStorage","survey","details","navigate","avatarImages","name","smileyFaceImages","surveyQuestions","onSubmit","character","characterChoice","render","buttonClassNames","styles","type","onClick","Button","disabled","buttonText","fillSpace","face","BreadcrumbNav","GridRow","isPadded","GridColumn","formFns","useForm","GenericLayout"],"sourceRoot":""}