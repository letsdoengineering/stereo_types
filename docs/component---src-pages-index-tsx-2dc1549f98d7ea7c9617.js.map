{"version":3,"file":"component---src-pages-index-tsx-2dc1549f98d7ea7c9617.js","mappings":"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","sources":["webpack://little_survey/./src/components/basics/INPUTS/Checkbox/Checkbox.module.css","webpack://little_survey/./src/components/basics/INPUTS/Checkbox/Checkbox.tsx","webpack://little_survey/./src/components/basics/INPUTS/TextInput/TextInput.tsx","webpack://little_survey/./src/components/basics/INPUTS/TextInput/TextInput.module.css","webpack://little_survey/./src/components/blocks/LabelledInput/LabelledInput.tsx","webpack://little_survey/./src/components/blocks/LabelledInput/LabelledInput.module.css","webpack://little_survey/./src/components/basics/Spacing/Spacing.module.css","webpack://little_survey/./src/components/basics/Spacing/Spacing.tsx","webpack://little_survey/./src/components/sections/proj/landingForm.tsx","webpack://little_survey/./src/components/sections/proj/landingForm.module.css","webpack://little_survey/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"Checkbox-module--container--CC6U2\";\nexport var checkmark = \"Checkbox-module--checkmark--W5hkK\";\nexport var unavailable = \"Checkbox-module--unavailable--s-F15\";","import React, { FunctionComponent } from 'react'\nimport Text from '../../Text/Text'\nimport * as checkboxStyles from './Checkbox.module.css'\nimport getClassNames from '../../../../utils/get-class-names'\n\nexport type CheckboxProps = React.ComponentProps<'input'> &\n    Readonly<{\n        /** id used for id of input - custom styling */\n        id?: string | undefined\n        /** tell the checkbox what it's status is, controlled by consumer and triggered via onChange */\n        isChecked: boolean\n        /** Called when toggled */\n        onChange(): void\n        /** value you wish the checkbox to have */\n        value: string\n        /** text for showing next to checkbox */\n        text: string\n        /** toggle to make unavailable */\n        available?: boolean\n    }>\n\nconst Checkbox: FunctionComponent<CheckboxProps> = ({\n    isChecked,\n    id,\n    available = true,\n    onChange,\n    value,\n    text,\n    ...rest\n}) => {\n    const textClassName = getClassNames({\n        conditionalClasses: { [`${checkboxStyles.unavailable}`]: !available },\n    })\n    const checkboxClassName = getClassNames({\n        defaultClasses: [`${checkboxStyles.checkmark}`],\n        conditionalClasses: { [`${checkboxStyles.unavailable}`]: !available },\n    })\n\n    return (\n        <label className={checkboxStyles.container}>\n            <input\n                disabled={!available}\n                checked={isChecked}\n                id={id}\n                onChange={onChange}\n                type='checkbox'\n                value={value}\n                {...rest}\n            />\n            <span className={checkboxClassName} />\n            <Text className={textClassName}>{text}</Text>\n        </label>\n    )\n}\n\nexport default Checkbox\n","import React, { forwardRef } from 'react'\nimport getClassNames from '../../../../utils/get-class-names'\nimport * as textInputStyles from './TextInput.module.css'\n\nexport type TextInputProps = React.ComponentPropsWithRef<'input'> & {\n    id?: string | undefined\n}\n\nconst TextInput = forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n    const { id, className, ...rest } = props\n    const textInputClassNames = getClassNames({\n        defaultClasses: [`${textInputStyles.textInput}`],\n        className: className,\n    })\n\n    return <input id={id} className={textInputClassNames} type='text' ref={ref} {...rest} />\n})\nTextInput.displayName = 'TextInput'\n\nexport default TextInput\n","// extracted by mini-css-extract-plugin\nexport var textInput = \"TextInput-module--text-input--8qrHz\";","import React, { forwardRef } from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as labeledInputStyles from './LabelledInput.module.css'\n\ntype LabelledInputProps = {\n    htmlFor: string | undefined\n    label: string\n    /** show an icon, maybe even provide the name of icon to show? */\n    icon?: React.ReactElement\n    children: React.ReactElement\n    iconOnRight?: boolean\n}\n\n/** LabelledInput: component that returns a label accessibly linked to the passed in Input */\nconst LabelledInput = forwardRef<HTMLInputElement, LabelledInputProps>((props, ref) => {\n    const { htmlFor, label, icon, iconOnRight = false, children, ...rest } = props\n\n    const childrenProps = {\n        ...rest,\n        id: htmlFor,\n        ref,\n    }\n\n    const childrenWithProps = React.Children.map(children, (child) => {\n        // Checking isValidElement is the safe way and avoids a typescript error too.\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, { ...childrenProps })\n        }\n        return child\n    })\n    const iconClassNames = getClassNames({\n        conditionalClasses: {\n            [`${labeledInputStyles.icon}`]: !!icon && !iconOnRight,\n            [`${labeledInputStyles.iconReverse}`]: iconOnRight,\n        },\n    })\n\n    const iconAndInputClassNames = getClassNames({\n        defaultClasses: [`${labeledInputStyles.iconAndInput}`],\n        conditionalClasses: {\n            [`${labeledInputStyles.iconAndInputReverse}`]: iconOnRight,\n        },\n    })\n\n    return (\n        <div className={labeledInputStyles.container}>\n            <label htmlFor={htmlFor}>\n                <span className={labeledInputStyles.labelText}>{label}</span>\n                <div className={iconAndInputClassNames}>\n                    {icon && <span className={iconClassNames}>{icon}</span>}\n                    {childrenWithProps}\n                </div>\n            </label>\n        </div>\n    )\n})\n\nLabelledInput.displayName = 'LabelledTextInput'\n\nexport default LabelledInput\n","// extracted by mini-css-extract-plugin\nexport var container = \"LabelledInput-module--container--a55Gc\";\nexport var labelText = \"LabelledInput-module--label-text--HnJbn\";\nexport var iconAndInput = \"LabelledInput-module--icon-and-input--lR531\";\nexport var iconAndInputReverse = \"LabelledInput-module--icon-and-input-reverse--G-K6V\";\nexport var icon = \"LabelledInput-module--icon--DcjMQ\";\nexport var iconReverse = \"LabelledInput-module--icon-reverse--FvFvP\";","// extracted by mini-css-extract-plugin\nexport var spacing = \"Spacing-module--spacing--omXOY\";\nexport var spacingSingle = \"Spacing-module--spacing-single--D6GUP\";\nexport var spacingDouble = \"Spacing-module--spacing-double--wVw1k\";","import React from 'react'\nimport * as spacingStyles from './Spacing.module.css'\nimport getClassNames from '../../../utils/get-class-names'\n\ntype SpacingProps = {\n    /** level of spacing to apply */\n    size?: 'Single' | 'Double'\n    /** children always of type ReactNode */\n    children?: React.ReactNode\n}\n\n/** Spacing: Returns a sizeable 'spacing' element that creates empty space on a page using a div */\nconst Spacing: React.FC<SpacingProps> = ({ size = 'Single', children }: SpacingProps) => {\n    const classNames = getClassNames({\n        defaultClasses: [spacingStyles[`spacing${size}`], spacingStyles['spacing']],\n    })\n    return <div className={classNames}>{children}</div>\n}\n\nexport default Spacing\n","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport { Controller, useFormContext } from 'react-hook-form'\n// import { navigate } from 'gatsby'\n\nimport Button from '../../basics/Button/Button'\nimport Checkbox from '../../basics/INPUTS/Checkbox/Checkbox'\nimport GridRow from '../../basics/Grid/GridRow/GridRow'\nimport GridColumn from '../../basics/Grid/GridColumn/GridColumn'\nimport TextInput from '../../basics/INPUTS/TextInput/TextInput'\nimport LabelledInput from '../../blocks/LabelledInput/LabelledInput'\nimport Spacing from '../../basics/Spacing/Spacing'\n\nimport {\n    getPreviousSearchDataFromLocalStorage,\n    setDataToLocalStorage,\n} from '../../../utils/use-local-storage'\nimport * as styles from './landingForm.module.css'\n\nconst INVALID = 'invalid'\n\nconst LandingForm: React.FC = () => {\n    const { control, handleSubmit, register, setValue } = useFormContext()\n    const [characterFirst, setCharacterFirst] = useState(false)\n    const [previousGroupValue, setPreviousGroupValue] = useState('')\n\n    useEffect(() => {\n        const previousGroup = getPreviousSearchDataFromLocalStorage('keep') // fetch previously submitted group value\n        if (previousGroup) setPreviousGroupValue(previousGroup.group) // if a group value exists set to form value for group\n        setDataToLocalStorage({}, 'keep') // clear out group value after fetching it.\n        setDataToLocalStorage({}, 'proj') // clear out any previous local storage under 'proj'\n    }, [])\n\n    useEffect(() => {\n        register('group')\n        register('name')\n        register('age')\n    }, [register])\n    const detailsFormIsValid = (detailsFormData: Record<string, any>): boolean => {\n        let formValid: boolean\n        formValid = !isNaN(parseInt(detailsFormData.age))\n        if (formValid) formValid = typeof detailsFormData.group == 'string'\n        if (formValid) formValid = typeof detailsFormData.name == 'string'\n        if (formValid) formValid = detailsFormData.pictureSequence.sequence !== INVALID\n        return formValid\n    }\n\n    const myOnSubmit = async (formData: Record<string, any>): Promise<void> => {\n        if (detailsFormIsValid(formData)) {\n            // setDataToLocalStorage({ details: formData }, 'proj')\n            // setDataToLocalStorage({ group: formData.group }, 'keep')\n            // await navigate(`/proj2`)\n            console.log('form is VERY valid', formData)\n        } else {\n            console.log('FORM NOT VALID', formData)\n        }\n    }\n\n    const handleCharacterFirst = (): void => {\n        setCharacterFirst(!characterFirst)\n    }\n\n    const sequenceOptions = [\n        { label: '-- must choose one -- ', value: '' },\n        { label: 'Sequence 1', value: '1' },\n        { label: 'Sequence 2', value: '2' },\n        { label: 'Sequence 3', value: '3' },\n        { label: 'Sequence 4', value: '4' },\n    ]\n    const [sequenceOption, setSequenceOption] = useState({\n        sequence: INVALID,\n    })\n    const handleSequence = (e: any): void => {\n        setSequenceOption(e.target.value)\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit(({ age, group, name }) => {\n                myOnSubmit({\n                    age: age,\n                    group: group,\n                    name: name,\n                    pictureSequence: sequenceOption,\n                    characterFirst: characterFirst,\n                })\n            })}\n        >\n            <GridRow isPadded className={styles.form}>\n                <GridColumn isPadded>\n                    <LabelledInput htmlFor='group-input' label='Group:'>\n                        <TextInput\n                            required={true}\n                            name='group'\n                            id='group-input'\n                            defaultValue={previousGroupValue}\n                            autoComplete='false'\n                            onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                                setValue('group', e.target.value)\n                            }}\n                        />\n                    </LabelledInput>\n                    <Controller\n                        name='name'\n                        control={control}\n                        render={(): React.ReactElement => (\n                            <LabelledInput htmlFor='name-input' label='Name:'>\n                                <TextInput\n                                    required={true}\n                                    name='name'\n                                    id='name-input'\n                                    autoComplete='false'\n                                    onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                                        setValue('name', e.target.value)\n                                    }}\n                                />\n                            </LabelledInput>\n                        )}\n                    />\n\n                    <LabelledInput htmlFor='age-input' label='Age:'>\n                        <TextInput\n                            required={true}\n                            name='age'\n                            id='age-input'\n                            autoComplete='false'\n                            onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                                setValue('age', e.target.value)\n                            }}\n                        />\n                    </LabelledInput>\n\n                    <LabelledInput htmlFor='character-first-input' label='Game Option:'>\n                        <Checkbox\n                            id='character-first-input'\n                            isChecked={characterFirst}\n                            value={`${characterFirst}`}\n                            text='Display character choice last?'\n                            onChange={(): void => handleCharacterFirst()}\n                        />\n                    </LabelledInput>\n\n                    <LabelledInput htmlFor='picture-sequence' label='Picture sequence:'>\n                        <select\n                            name='pictureSequence'\n                            id='picture-sequence'\n                            placeholder='please select'\n                            defaultValue={''}\n                            onChange={(e): void => handleSequence(e)}\n                        >\n                            {sequenceOptions.map((item) => {\n                                return (\n                                    <option key={`${item.value}-${item.label}`} value={item.value}>\n                                        {item.label}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </LabelledInput>\n                    <Spacing />\n                    <Button size='M' type='submit' buttonText='Submit' fillSpace={false} />\n                </GridColumn>\n            </GridRow>\n        </form>\n    )\n}\n\nexport default LandingForm\n","// extracted by mini-css-extract-plugin\nexport var form = \"landingForm-module--form--zcUMA\";","import React from 'react'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport LandingForm from '../components/sections/proj/landingForm'\n\nconst IndexPage: React.FC = () => {\n    const formFns = useForm()\n    return (\n        <FormProvider {...formFns}>\n            <GenericLayout>\n                <LandingForm />\n            </GenericLayout>\n        </FormProvider>\n    )\n}\n\nexport default IndexPage\n"],"names":["unavailable","isChecked","id","available","onChange","value","text","rest","textClassName","getClassNames","conditionalClasses","checkboxStyles","checkboxClassName","defaultClasses","className","disabled","checked","type","Text","TextInput","forwardRef","props","ref","textInputClassNames","displayName","LabelledInput","htmlFor","label","icon","iconOnRight","children","childrenProps","childrenWithProps","React","child","iconClassNames","iconAndInputClassNames","spacing","spacingSingle","spacingDouble","size","classNames","spacingStyles","INVALID","useFormContext","control","handleSubmit","register","setValue","useState","characterFirst","setCharacterFirst","previousGroupValue","setPreviousGroupValue","useEffect","previousGroup","getPreviousSearchDataFromLocalStorage","group","setDataToLocalStorage","myOnSubmit","formData","detailsFormData","formValid","isNaN","parseInt","age","name","pictureSequence","sequence","console","log","sequenceOption","setSequenceOption","onSubmit","GridRow","isPadded","GridColumn","required","defaultValue","autoComplete","e","target","render","placeholder","handleSequence","map","item","key","Button","buttonText","fillSpace","formFns","useForm","GenericLayout"],"sourceRoot":""}