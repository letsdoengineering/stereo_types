{"version":3,"file":"component---src-pages-proj-3-tsx-c2f0a0960d4d35a0998f.js","mappings":"8OA+BA,EAnB0C,SAAC,GAMtB,MALjBA,EAKiB,EALjBA,QACAC,EAIiB,EAJjBA,UAIiB,IAHjBC,QAAAA,OAGiB,SAFjBC,EAEiB,EAFjBA,SACGC,GACc,YACXC,GAAaC,EAAAA,EAAAA,GAAc,CAC7BL,UAAAA,EACAM,oBAAkB,OCpBL,oCDoBwCL,EAAnC,KAGtB,OACI,oCAAIM,IAAKR,EAASC,UAAWI,GAAgBD,GACxCD,IE0Bb,EA5BI,SAAC,GAOY,UANbM,UAAAA,OAMa,aALbC,WAAAA,OAKa,aAJbR,QAAAA,OAIa,aAHbS,WAAAA,OAGa,SAFbV,EAEa,EAFbA,UACAE,EACa,EADbA,SAEMS,EAAaH,EAAY,KAAO,KAChCJ,GAAaC,EAAAA,EAAAA,GAAc,CAC7BL,UAAAA,EACAM,oBAAkB,OClCA,qCDmCkBG,EADlB,ECjCD,oCDmCaC,EAFZ,KAMhBE,EAAoBC,EAAAA,SAAAA,IAAmBX,GAAU,SAACY,GAEpD,OAAID,EAAAA,eAAqBC,GACdD,EAAAA,aAAmBC,EAAO,CAAEb,QAAAA,IAEhCa,KAGX,OAAO,gBAACH,EAAD,CAASX,UAAWI,GAAaQ,IEd5C,EApBiD,SAAC,GAAgB,IACxDG,EADwD,EAAdC,QACvBC,KAAI,SAACC,EAAmBC,GAC7C,IAAMC,EAAWF,EAAMG,IACnB,qBAAGrB,UChBG,oCDgBkCsB,KAAMJ,EAAMG,KAChD,gBAACE,EAAA,EAAD,KAAOL,EAAMM,QAGjB,gBAACD,EAAA,EAAD,CAAME,OAAO,QAAQP,EAAMM,OAG/B,OACI,gBAAC,EAAD,CAAUjB,IAAQY,EAAL,IAAUD,EAAMM,MAASzB,QAAYoB,EAAL,IAAUD,EAAMM,OACxDL,EAAI,GAAK,gBAACI,EAAA,EAAD,CAAMvB,UCxBX,wCDwBK,KACToB,MAIb,OAAO,gBAAC,EAAD,CAAMpB,UC/BC,qCD+BqCe,K,8GEFvD,EAzBkC,WAAM,MAC9BW,GAAOC,EAAAA,EAAAA,GAAsC,SAAW,GAC9DC,QAAQC,IAAI,gBAAiBH,GAC7B,IAAMI,EAAWJ,MAAAA,GAAA,UAAAA,EAAMK,eAAN,SAAeC,KAAON,EAAKK,QAAQC,KAAO,SACrDC,EAAQ,IAAIC,KAClB,OACI,gCACI,gBAACC,EAAA,EAAD,CACInB,QAAS,CACL,CAAEK,IAAK,IAAKG,MAAO,YACnB,CAAEH,IAAK,SAAUG,MAAO,8BACxB,CAAEA,MAAO,eAGjB,yBAAIY,KAAKC,UAAUX,IACnB,qBACIJ,KAAI,gCAAkCgB,mBAAmBF,KAAKC,UAAUX,IACxEa,SAAaT,EAAL,QAFZ,mBAIwBA,EAJxB,IAIoCG,EAJpC,WCPZ,EARiC,WAC7B,OACI,gBAACO,EAAA,EAAD,KACI,gBAAC,EAAD","sources":["webpack://little_survey/./src/components/basics/List/ListItem.tsx","webpack://little_survey/./src/components/basics/List/ListItem.module.css","webpack://little_survey/./src/components/basics/List/List.tsx","webpack://little_survey/./src/components/basics/List/List.module.css","webpack://little_survey/./src/components/basics/BreadcrumbNav/BreadcrumbNav.tsx","webpack://little_survey/./src/components/basics/BreadcrumbNav/BreadcrumbNav.module.css","webpack://little_survey/./src/components/sections/proj/downloadSection.tsx","webpack://little_survey/./src/pages/proj3.tsx"],"sourcesContent":["import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as listItemStyles from './ListItem.module.css'\n\ntype ListItemProps = React.AllHTMLAttributes<HTMLLIElement> & {\n    /** unique key for each <li> rendered to help react track dynamically rendered contents */\n    listKey: string\n    /** optional: styles a list to appear as links if set - defaults to false */\n    isLinks?: boolean\n}\n\n/** Text: renders a Text tag of a type based on the tagName prop */\nconst ListItem: React.FC<ListItemProps> = ({\n    listKey,\n    className,\n    isLinks = false,\n    children,\n    ...rest\n}: ListItemProps) => {\n    const classNames = getClassNames({\n        className,\n        conditionalClasses: { [`${listItemStyles.isLinks}`]: isLinks },\n    })\n\n    return (\n        <li key={listKey} className={classNames} {...rest}>\n            {children}\n        </li>\n    )\n}\n\nexport default ListItem\n","// extracted by mini-css-extract-plugin\nexport var isLinks = \"ListItem-module--is-links--wjiDe\";","import React from 'react'\nimport getClassNames from '../../../utils/get-class-names'\nimport * as listStyles from './List.module.css'\n\nexport type ListProps = {\n    /** optional: default to ul if not passed */\n    isOrdered?: boolean\n    /** optional: default to unstyled if not passed */\n    isUnstyled?: boolean\n    /** optional: styles a list to appear as links if set - defaults to false */\n    isLinks?: boolean\n    /** optional: indents the list if set to true */\n    isIndented?: boolean\n    /** optional: class-names */\n    className?: string\n    /** children always of type ReactNode */\n    children: React.ReactNode\n}\n\n/** Text: renders a Text tag of a type based on the tagName prop */\nconst List: React.FC<\n    ListProps &\n        React.AllHTMLAttributes<HTMLUListElement> &\n        React.AllHTMLAttributes<HTMLOListElement>\n> = ({\n    isOrdered = false,\n    isUnstyled = true,\n    isLinks = false,\n    isIndented = false,\n    className,\n    children,\n}: ListProps) => {\n    const Wrapper = `${isOrdered ? 'ol' : 'ul'}` as keyof JSX.IntrinsicElements\n    const classNames = getClassNames({\n        className,\n        conditionalClasses: {\n            [`${listStyles.listUnstyled}`]: isUnstyled,\n            [listStyles.itemSpacing]: isIndented,\n        },\n    })\n\n    const childrenWithProps = React.Children.map(children, (child) => {\n        // Checking isValidElement is the safe way and avoids a typescript error too.\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, { isLinks })\n        }\n        return child\n    })\n\n    return <Wrapper className={classNames}>{childrenWithProps}</Wrapper>\n}\n\nexport default List\n","// extracted by mini-css-extract-plugin\nexport var listUnstyled = \"List-module--list-unstyled--OYpBm\";\nexport var itemSpacing = \"List-module--item-spacing--mP5WM\";","import React from 'react'\nimport Text from '../../basics/Text/Text'\nimport ListItem from '../../basics/List/ListItem'\nimport List from '../../basics/List/List'\nimport * as breadcrumbNavStyles from './BreadcrumbNav.module.css'\n\ntype Breadcrumb = {\n    url?: string\n    label: string\n}\n\ntype BreadCrumbProps = {\n    urlList: Breadcrumb[]\n}\n\nconst BreadcrumbNav: React.FC<BreadCrumbProps> = ({ urlList }) => {\n    const navTrail = urlList.map((crumb: Breadcrumb, i) => {\n        const location = crumb.url ? (\n            <a className={breadcrumbNavStyles.link} href={crumb.url}>\n                <Text>{crumb.label}</Text>\n            </a>\n        ) : (\n            <Text weight='Bold'>{crumb.label}</Text>\n        )\n\n        return (\n            <ListItem key={`${i}-${crumb.label}`} listKey={`${i}-${crumb.label}`}>\n                {i > 0 && <Text className={breadcrumbNavStyles.divider}>{`>`}</Text>}\n                {location}\n            </ListItem>\n        )\n    })\n    return <List className={breadcrumbNavStyles.list}>{navTrail}</List>\n}\n\nexport default BreadcrumbNav\n","// extracted by mini-css-extract-plugin\nexport var list = \"BreadcrumbNav-module--list--XJLwI\";\nexport var link = \"BreadcrumbNav-module--link--t8QBw\";\nexport var divider = \"BreadcrumbNav-module--divider--neNB6\";","import React from 'react'\n\nimport { getPreviousSearchDataFromLocalStorage } from '../../../utils/use-local-storage'\nimport BreadcrumbNav from '../../basics/BreadcrumbNav/BreadcrumbNav'\n\nconst DownloadSection: React.FC = () => {\n    const data = getPreviousSearchDataFromLocalStorage('proj') || {}\n    console.log('localStorage:', data)\n    const fileName = data?.details?.name ? data.details.name : 'NONAME'\n    const today = new Date()\n    return (\n        <>\n            <BreadcrumbNav\n                urlList={[\n                    { url: '/', label: 're-start' },\n                    { url: '/proj2', label: 're-choose survey questions' },\n                    { label: 'download' },\n                ]}\n            />\n            <p>{JSON.stringify(data)}</p>\n            <a\n                href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`}\n                download={`${fileName}.csv`}\n            >\n                {`DOWNLOAD data: \"${fileName}-${today}.csv\"`}\n            </a>\n        </>\n    )\n}\n\nexport default DownloadSection\n","import React from 'react'\n\nimport GenericLayout from '../components/layouts/GenericLayout/GenericLayout'\nimport DownloadSection from '../components/sections/proj/downloadSection'\n\nconst submissionPage: React.FC = () => {\n    return (\n        <GenericLayout>\n            <DownloadSection />\n        </GenericLayout>\n    )\n}\n\nexport default submissionPage\n"],"names":["listKey","className","isLinks","children","rest","classNames","getClassNames","conditionalClasses","key","isOrdered","isUnstyled","isIndented","Wrapper","childrenWithProps","React","child","navTrail","urlList","map","crumb","i","location","url","href","Text","label","weight","data","getPreviousSearchDataFromLocalStorage","console","log","fileName","details","name","today","Date","BreadcrumbNav","JSON","stringify","encodeURIComponent","download","GenericLayout"],"sourceRoot":""}